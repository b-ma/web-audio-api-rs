# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: benchmark

# read-only repo token, no access to secrets
permissions:
  contents: read

# no access to secrets
on:
  issue_comment:
    types: [created, edited]

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request }} && contains(github.event.comment.body, '/bench')

    steps:
      # the workflow is triggered from main branch
      # cf. https://stackoverflow.com/a/62345139
      - name: Github API Request
        id: request
        uses: octokit/request-action@v2.0.0
        with:
          route: ${{ github.event.issue.pull_request.url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # checkout PR branch
      - name: Checkout PR Branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ fromJson(steps.request.outputs.data).head.repo.full_name }}
          ref: ${{ steps.pr_data.outputs.branch }}

      # install dependencies
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # restore cargo cache from previous runs
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.0.0

      ## Benchmarks
      - name: install valgrind for benchmarks
        run: sudo apt-get install valgrind
      - name: Checkout main branch
        run: git checkout main
      - name: Copy over benchmarks from PR branch
        run: git checkout - -- benches/my_benchmark.rs
      - name: Revert when benches do not compile on main
        run: cargo check --benches --no-default-features || git checkout main -- benches/my_benchmark.rs
      - name: Run benchmarks for main branch
        run: cargo bench --no-default-features
      - name: Checkout PR branch
        run: git checkout -
      - name: Run bench against baseline
        run: cargo bench --no-default-features | sed '0,/^test result:/d' | tee bench.txt

      # for testing
      # - name: create mock results
      #   run: echo "my bench results" > bench.txt

      ## Save results
      ## see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      - name: Save PR number and bench results
        run: |
          mkdir -p ./pr
          echo ${{ github.event.issue.number }} > ./pr/pr_number.txt
          mv bench.txt ./pr/bench.txt
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
